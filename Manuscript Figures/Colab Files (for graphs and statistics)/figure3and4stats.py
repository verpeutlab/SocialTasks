# -*- coding: utf-8 -*-
"""Figure3and4stats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y0Eg02tjbuPvc8lpctMM26G7E4OurKVB
"""

import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols
from itertools import combinations
from scipy.stats import t
from scipy.stats import shapiro
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu
from scipy import stats
import numpy as np
from statsmodels.stats.multicomp import pairwise_tukeyhsd, MultiComparison
from google.colab import drive
drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/SexDiffThreeChamberTestsData.csv')
dataframe = pd.DataFrame(csv)

"""# **Corner Differences - Open Field SLEAP Metrics**"""

csv2 = pd.read_csv('/content/drive/My Drive/NewSexDiffSLEAPOpenField.csv')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
sex = 'Female'

# Filter data
filtered_data = csv2[csv2['Sex'] == sex]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex'], value_vars=['backleft', 'backright', 'frontleft','frontright'],
                                   var_name='Corner', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Corner)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Corners')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Corner'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Corner'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Corner'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
sex = 'Male'

# Filter data
filtered_data = csv2[csv2['Sex'] == sex]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex'], value_vars=['backleft', 'backright', 'frontleft','frontright'],
                                   var_name='Corner', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Corner)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Corners')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Corner'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Corner'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Corner'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

"""# **Sex Differences Open Field (SLEAP Metrics)**"""

def cohens_d(group1, group2):
    """Calculate Cohen's d effect size.

    Parameters:
    group1 (array-like): Data for group 1.
    group2 (array-like): Data for group 2.

    Returns:
    float: Cohen's d effect size.
    """
    mean_diff = np.mean(group1) - np.mean(group2)
    n1, n2 = len(group1), len(group2)
    pooled_std = np.sqrt(((n1 - 1) * np.std(group1, ddof=1)**2 + (n2 - 1) * np.std(group2, ddof=1)**2) / (n1 + n2 - 2))
    return mean_diff / pooled_std

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv2['INNER distance traveled (m)'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['INNER distance traveled (m)'], csv2[(csv2['Sex'] == 'Male')]['INNER distance traveled (m)'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['INNER distance traveled (m)'], csv2[(csv2['Sex'] == 'Male')]['INNER distance traveled (m)'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Female')]['INNER distance traveled (m)'], csv2[(csv2['Sex'] == 'Male')]['INNER distance traveled (m)'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['INNER distance traveled (m)'])
sem_cup3 = stats.sem(csv2['INNER distance traveled (m)'])
degrees_freedom = len(csv2['INNER distance traveled (m)']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv2['INNER time spent (s):'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['INNER time spent (s):'], csv2[(csv2['Sex'] == 'Male')]['INNER time spent (s):'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['INNER time spent (s):'], csv2[(csv2['Sex'] == 'Male')]['INNER time spent (s):'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Female')]['INNER time spent (s):'], csv2[(csv2['Sex'] == 'Male')]['INNER time spent (s):'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['INNER time spent (s):'])
sem_cup3 = stats.sem(csv2['INNER time spent (s):'])
degrees_freedom = len(csv2['INNER time spent (s):']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv2['Total time spent in corners (s):'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['Total time spent in corners (s):'], csv2[(csv2['Sex'] == 'Male')]['Total time spent in corners (s):'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['Total time spent in corners (s):'], csv2[(csv2['Sex'] == 'Male')]['Total time spent in corners (s):'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Female')]['Total time spent in corners (s):'], csv2[(csv2['Sex'] == 'Male')]['Total time spent in corners (s):'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['Total time spent in corners (s):'])
sem_cup3 = stats.sem(csv2['Total time spent in corners (s):'])
degrees_freedom = len(csv2['Total time spent in corners (s):']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv2['Total Distance Traveled (m):'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['Total Distance Traveled (m):'], csv2[(csv2['Sex'] == 'Male')]['Total Distance Traveled (m):'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['Total Distance Traveled (m):'], csv2[(csv2['Sex'] == 'Male')]['Total Distance Traveled (m):'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Female')]['Total Distance Traveled (m):'], csv2[(csv2['Sex'] == 'Male')]['Total Distance Traveled (m):'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['Total Distance Traveled (m):'])
sem_cup3 = stats.sem(csv2['Total Distance Traveled (m):'])
degrees_freedom = len(csv2['Total Distance Traveled (m):']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv2['Total Time spent in chamber (s):'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['Total Time spent in chamber (s):'], csv2[(csv2['Sex'] == 'Male')]['Total Time spent in chamber (s):'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['Total Time spent in chamber (s):'], csv2[(csv2['Sex'] == 'Male')]['Total Time spent in chamber (s):'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Female')]['Total Time spent in chamber (s):'], csv2[(csv2['Sex'] == 'Male')]['Total Time spent in chamber (s):'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['Total Time spent in chamber (s):'])
sem_cup3 = stats.sem(csv2['Total Time spent in chamber (s):'])
degrees_freedom = len(csv2['Total Time spent in chamber (s):']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

"""# **Baseline**"""

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Baseline'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Baseline'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Baseline'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Baseline'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

"""# **Social Discrimination/Preference**"""

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_m', 'Cup3_m'],
                                   var_name='Cup', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_m', 'Cup3_m'],
                                   var_name='Cup', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_s', 'Cup3_s'],
                                   var_name='Cup', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_s', 'Cup3_s'],
                                   var_name='Cup', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

"""# **Social Memory**"""



# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_s', 'Chamber2_s', 'Chamber3_s'],
                                   var_name='Chamber', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Time Spent in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1_m', 'Chamber2_m', 'Chamber3_m'],
                                   var_name='Chamber', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled in Chambers')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_m', 'Cup3_m'],
                                   var_name='Cup', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_m', 'Cup3_m'],
                                   var_name='Cup', value_name='Distance_Traveled')

# Fit the linear model
model = ols('Distance_Traveled ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Distance_Traveled'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Distance_Traveled']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Distance_Traveled']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_s', 'Cup3_s'],
                                   var_name='Cup', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Cup1_s', 'Cup3_s'],
                                   var_name='Cup', value_name='Time_Spent')

# Fit the linear model
model = ols('Time_Spent ~ C(Cup)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Time_Spent'], reshaped_data['Cup'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Cup'] == group1]['Time_Spent']
        group2_data = reshaped_data[reshaped_data['Cup'] == group2]['Time_Spent']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

"""**Crossings**"""

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1(Cross)', 'Chamber3(Cross)'],
                                   var_name='Chamber', value_name='Crossings')

# Fit the linear model
model = ols('Crossings ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Crossings'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Crossings']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Crossings']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Preference'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1(Cross)', 'Chamber3(Cross)'],
                                   var_name='Chamber', value_name='Crossings')

# Fit the linear model
model = ols('Crossings ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Crossings'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Crossings']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Crossings']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'F'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1(Cross)', 'Chamber3(Cross)'],
                                   var_name='Chamber', value_name='Crossings')

# Fit the linear model
model = ols('Crossings ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Crossings'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Crossings']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Crossings']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')

# Filter the dataframe for the specific test (e.g., 'Social Preference') and sex (e.g., 'F' for females)
test_name = 'Social Memory'
sex = 'M'

# Filter data
filtered_data = dataframe[(dataframe['Test'] == test_name) & (dataframe['Sex'] == sex)]

# Check if data is filtered correctly
print(filtered_data)

# Reshape the data for ANOVA
reshaped_data = filtered_data.melt(id_vars=['Mouse#', 'Sex', 'Test'], value_vars=['Chamber1(Cross)', 'Chamber3(Cross)'],
                                   var_name='Chamber', value_name='Crossings')

# Fit the linear model
model = ols('Crossings ~ C(Chamber)', data=reshaped_data).fit()

# Perform ANOVA
anova_results = sm.stats.anova_lm(model, typ=2)
print('ANOVA results for Distance Traveled around Cups')
print(anova_results)

# Perform pairwise comparisons using Tukey's HSD
mc = MultiComparison(reshaped_data['Crossings'], reshaped_data['Chamber'])
tukey_result = mc.tukeyhsd()
print(tukey_result.summary())

# Extract the p-values and confidence intervals from Tukey's HSD
tukey_summary_data = np.array(tukey_result.summary().data[1:])  # Exclude header
header = tukey_result.summary().data[0]

# Calculate Cohen's d for pairs where the null hypothesis is rejected
def cohen_d(group1, group2):
    # Calculate the size of samples
    n1, n2 = len(group1), len(group2)
    # Calculate the variance of the samples
    var1, var2 = group1.var(ddof=1), group2.var(ddof=1)
    # Calculate the pooled standard deviation
    pooled_std = np.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    # Calculate the means of the samples
    mean1, mean2 = group1.mean(), group2.mean()
    # Calculate Cohen's d
    d = (mean1 - mean2) / pooled_std
    return d

print("\nTukey's HSD results with confidence intervals and Cohen's d for significant differences:")
for row in tukey_summary_data:
    group1, group2, meandiff, p_adj, lower, upper, reject = row
    if reject == 'True':  # If the null hypothesis is rejected
        group1_data = reshaped_data[reshaped_data['Chamber'] == group1]['Crossings']
        group2_data = reshaped_data[reshaped_data['Chamber'] == group2]['Crossings']
        d = cohen_d(group1_data, group2_data)
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper}), Cohen\'s d={d:.4f}')
    else:
        print(f'{group1} vs {group2}: Mean Difference={meandiff}, p-adj={p_adj}, CI=({lower}, {upper})')