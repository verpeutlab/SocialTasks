# -*- coding: utf-8 -*-
"""Figure6_PartB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNCogqX3gqs5zeA9khkXjoG_ma6YDJYG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import PathPatch
from matplotlib.path import Path
from google.colab import drive
from google.colab import files
import os
drive.mount('/content/drive/')

# Data for figure is the summation of results in TotalTimeBehavior3.csv and data in SexDiff_TOI_TotalTime.csv
# After figure was downloaded, it was edited in Adobe Illustrator. The bar colors were changed, and the bars (along with the individual data points and error bars) were shifted to the left. End result is Part B of Figure 6.

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
data = {
    "Mouse Name": ["C262_L", "C262_R", "C274_L", "C292_L", "C296_LLR", "C296_RRL", "C302_L", "C308_L",
                   "C249_LR", "C249_RR", "C255_L", "C257_L", "C289_L", "C303_L", "C313_L", "C257_R"],
    "Sex": ["F", "F", "F", "F", "F", "F", "F", "F",
            "M", "M", "M", "M", "M", "M", "M", "M"],
    "Total Time": [2.35, 1.3667, 3.2, 2.5667, 1.9167, 2.1833, 2.2667, 1.85,
                   2.1667, 4.3667, 2.05, 2.0667, 2.1, 1.5, 2.1833, 2.2333],
    "Total SimBA Time": [116.339, 89.34, 77.848, 41.78, 161.576, 121.899, 105.338, 55.153,
                         126.813, 104.559, 61.983, 109.476, 76.186, 80.747, 79.966, 113.102]
}

df = pd.DataFrame(data)

# Melt the data for plotting
df_melted = df.melt(id_vars="Sex", value_vars=["Total Time", "Total SimBA Time"],
                    var_name="Measure", value_name="Time")

# Plot using Seaborn
plt.figure(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator
sns.barplot(data=df_melted, x='Sex', y='Time', hue='Measure', errorbar='sd',
            palette={'Total Time': 'skyblue', 'Total SimBA Time': 'moccasin'}, width = 0.4, capsize=0.1)

# Individual data points
sns.stripplot(data=df_melted, x='Sex', y='Time', hue='Measure', dodge=True,
              palette='dark:black', size=5, alpha=0.7, zorder=1, legend=False)

plt.xlabel('')
plt.ylabel('Time (Minutes)')
plt.title('')

# Set maximum value on y-axis with extra padding
plt.ylim(0, max(df_melted['Time']) + 50)

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Define custom legend elements
legend_elements = [
    Line2D([0], [0], marker='o', color='w', label='Total Time', markerfacecolor='skyblue', markersize=10),
    Line2D([0], [0], marker='o', color='w', label='Total SimBA Time', markerfacecolor='moccasin', markersize=10)
]

# Create legend and place it in the top left corner
plt.legend(handles=legend_elements, loc='upper left', frameon=False)

# Save file as a PDF
file_path = "/content/TotalTime_vs_TotalSimBATime_Grouped_Updated.pdf"
plt.savefig(file_path)
# files.download(file_path)

# Show the plot
plt.show()

import pandas as pd
from scipy import stats

# Data
data = {
    "Mouse Name": ["C262_L", "C262_R", "C274_L", "C292_L", "C296_LLR", "C296_RRL", "C302_L", "C308_L",
                   "C249_LR", "C249_RR", "C255_L", "C257_L", "C289_L", "C303_L", "C313_L", "C257_R"],
    "Sex": ["F", "F", "F", "F", "F", "F", "F", "F",
            "M", "M", "M", "M", "M", "M", "M", "M"],
    "Total Time": [2.35, 1.3667, 3.2, 2.5667, 1.9167, 2.1833, 2.2667, 1.85,
                   2.1667, 4.3667, 2.05, 2.0667, 2.1, 1.5, 2.1833, 2.2333],
    "Total SimBA Time": [116.339, 89.34, 77.848, 41.78, 161.576, 121.899, 105.338, 55.153,
                         126.813, 104.559, 61.983, 109.476, 76.186, 80.747, 79.966, 113.102]
}

# Convert data to DataFrame
df = pd.DataFrame(data)

# Separate the data by sex
female_data = df[df['Sex'] == 'F']
male_data = df[df['Sex'] == 'M']

# Perform paired t-test for females
t_stat_f, p_value_f = stats.ttest_rel(female_data['Total Time'], female_data['Total SimBA Time'])

# Perform paired t-test for males
t_stat_m, p_value_m = stats.ttest_rel(male_data['Total Time'], male_data['Total SimBA Time'])

# Output results
print("Female Group - Paired t-test:")
print(f"t-statistic: {t_stat_f}, p-value: {p_value_f}")

print("\nMale Group - Paired t-test:")
print(f"t-statistic: {t_stat_m}, p-value: {p_value_m}")