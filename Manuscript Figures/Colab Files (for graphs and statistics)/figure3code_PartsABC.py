# -*- coding: utf-8 -*-
"""Figure3Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cuLk1da_dJSHliCfI_r6Ge_vgSo9HgUA
"""

import numpy as np
import pandas as pd
from google.colab import drive
import matplotlib.pyplot as plt
from google.colab import files
import os
drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/SexDiffThreeChamberTestsData.csv')
dataframe = pd.DataFrame(csv)

"""# **Baseline**"""

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Baseline']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1(s)'].tolist(),
    females['Chamber2(s)'].tolist(),
    females['Chamber3(s)'].tolist()
]
time_spent_males = [
    males['Chamber1(s)'].tolist(),
    males['Chamber2(s)'].tolist(),
    males['Chamber3(s)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]

# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Chamber One', 'Chamber Two', 'Chamber Three']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5  # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 618))
ax.set_xlabel('')
ax.set_ylabel('Time Spent (s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentInChambers_Baseline.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Baseline']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1_m'].tolist(),
    females['Chamber2(m)'].tolist(),
    females['Chamber3(m)'].tolist()
]
time_spent_males = [
    males['Chamber1_m'].tolist(),
    males['Chamber2(m)'].tolist(),
    males['Chamber3(m)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Chamber One', 'Chamber Two', 'Chamber Three']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 60))
ax.set_xlabel('')
ax.set_ylabel('Distance Traveled (m)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/DistanceTraveledInChambers_Baseline.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

"""# **Social Discrimination**"""

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Preference']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1(s)'].tolist(),
    females['Chamber2(s)'].tolist(),
    females['Chamber3(s)'].tolist()
]
time_spent_males = [
    males['Chamber1(s)'].tolist(),
    males['Chamber2(s)'].tolist(),
    males['Chamber3(s)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Chamber Two', 'Object']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 618))
ax.set_xlabel('')
ax.set_ylabel('Time Spent (s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentInChambers_Preference.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Preference']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1_m'].tolist(),
    females['Chamber2(m)'].tolist(),
    females['Chamber3(m)'].tolist()
]
time_spent_males = [
    males['Chamber1_m'].tolist(),
    males['Chamber2(m)'].tolist(),
    males['Chamber3(m)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Chamber Two', 'Object']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 60))
ax.set_xlabel('')
ax.set_ylabel('Distance Traveled (m)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/DistanceTraveledInChambers_Preference.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Preference']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Cup1(m)'].tolist(),
    females['Cup3(m)'].tolist()
]
time_spent_males = [
    males['Cup1(m)'].tolist(),
    males['Cup3(m)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Object']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 60))
ax.set_xlabel('')
ax.set_ylabel('Distance Traveled around Cup (m)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/DistanceTraveledCup_Preference.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Preference']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Cup1(s)'].tolist(),
    females['Cup3(s)'].tolist()
]
time_spent_males = [
    males['Cup1(s)'].tolist(),
    males['Cup3(s)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Object']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 618))
ax.set_xlabel('')
ax.set_ylabel('Time Spent around Cup (s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentCup_Preference.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

"""# **Social Memory**"""

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Memory']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1(s)'].tolist(),
    females['Chamber2(s)'].tolist(),
    females['Chamber3(s)'].tolist()
]
time_spent_males = [
    males['Chamber1(s)'].tolist(),
    males['Chamber2(s)'].tolist(),
    males['Chamber3(s)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Chamber Two', 'Novel Mouse']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 618))
ax.set_xlabel('')
ax.set_ylabel('Time Spent (s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentInChambers_Memory.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Memory']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Chamber1_m'].tolist(),
    females['Chamber2(m)'].tolist(),
    females['Chamber3(m)'].tolist()
]
time_spent_males = [
    males['Chamber1_m'].tolist(),
    males['Chamber2(m)'].tolist(),
    males['Chamber3(m)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Chamber Two', 'Novel Mouse']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 60))
ax.set_xlabel('')
ax.set_ylabel('Distance Traveled (m)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/DistanceTraveledInChambers_Memory.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Memory']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Cup1(m)'].tolist(),
    females['Cup3(m)'].tolist()
]
time_spent_males = [
    males['Cup1(m)'].tolist(),
    males['Cup3(m)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Novel Mouse']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 60))
ax.set_xlabel('')
ax.set_ylabel('Distance Traveled around Cup (m)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/DistanceTraveledCup_Memory.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Filter the dataframe to only include rows where `Test` equals 'Baseline'
dataframe_baseline = dataframe[dataframe['Test'] == 'Social Memory']

# Separate the data based on `Sex` and chambers
females = dataframe_baseline[dataframe_baseline['Sex'] == 'F']
males = dataframe_baseline[dataframe_baseline['Sex'] == 'M']

# Extract time spent in each chamber
time_spent_females = [
    females['Cup1(s)'].tolist(),
    females['Cup3(s)'].tolist()
]
time_spent_males = [
    males['Cup1(s)'].tolist(),
    males['Cup3(s)'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Social Partner', 'Novel Mouse']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 618))
ax.set_xlabel('')
ax.set_ylabel('Time Spent around Cup (s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentCup_Memory.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()