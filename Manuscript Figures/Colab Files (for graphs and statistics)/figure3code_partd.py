# -*- coding: utf-8 -*-
"""figure3code_PartD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvfvD7asZ2eGJP3m9zXPIcy9UoiOg63s
"""

import numpy as np
import matplotlib.pyplot as plt
import os
from google.colab import drive
from google.colab import files
import seaborn as sns
import pandas as pd
from scipy.stats import shapiro
from scipy.stats import mannwhitneyu
from scipy.stats import ttest_ind
import scipy.stats as stats
drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/SocialIndexNovelty2.csv')
print(csv)
df = pd.DataFrame(csv)
## Conspecific Sociability (aka Sociable Index)

def cohens_d(group1, group2):
    """Calculate Cohen's d effect size.

    Parameters:
    group1 (array-like): Data for group 1.
    group2 (array-like): Data for group 2.

    Returns:
    float: Cohen's d effect size.
    """
    mean_diff = np.mean(group1) - np.mean(group2)
    n1, n2 = len(group1), len(group2)
    pooled_std = np.sqrt(((n1 - 1) * np.std(group1, ddof=1)**2 + (n2 - 1) * np.std(group2, ddof=1)**2) / (n1 + n2 - 2))
    return mean_diff / pooled_std

"""# **Conspecific Sociability (aka Sociable Index)**"""

# Shapiro-Wilk test to check for normal distribution
csv2 = csv[csv['Formula'] == 'Sociable Index']
statistic, p_value = shapiro(csv2['NewValue'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['NewValue'], csv2[(csv2['Sex'] == 'Male')]['NewValue'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['NewValue'], csv2[(csv2['Sex'] == 'Male')]['NewValue'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['NewValue'], csv2[(csv2['Sex'] == 'Female')]['NewValue'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['NewValue'])
sem_cup3 = stats.sem(csv2['NewValue'])
degrees_freedom = len(csv2['NewValue']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

df = pd.DataFrame(csv)

# Filter the data to include only rows with "Sociable Index"
df_sociable_index = df[df['Formula'] == 'Sociable Index']

# Calculate the means and standard deviations
means = df_sociable_index.groupby('Sex')['NewValue'].mean().reindex(['Female', 'Male'])
stds = df_sociable_index.groupby('Sex')['NewValue'].std().reindex(['Female', 'Male'])

# Set the figure size
plt.figure(figsize=(6, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Create the bar plot with error bars
ax = sns.barplot(x='Sex', y='NewValue', data=df_sociable_index, ci=None, palette={'Female':'magenta','Male':'green'}, alpha=0.7, capsize=0.1, errwidth=2, width = 0.6, dodge = False, legend = False)
ax.errorbar(['Female', 'Male'], means, yerr=stds, fmt='none', c='black', capsize=5, label='Standard Deviation')

# Overlay the individual data points
sns.stripplot(x='Sex', y='NewValue', data=df_sociable_index, jitter=True, color='black', size=8, alpha=0.6, ax=ax)

# Add a horizontal line for the x-axis
plt.axhline(0, color='black', linewidth=1)

# Remove the top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)


# Customize the plot
plt.title('')
plt.xlabel('Sex')
plt.ylabel('Conspecific Sociability')
plt.ylim(0, 1)

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/ConspecificSociability.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

"""# **Social Novelty**"""

# Shapiro-Wilk test to check for normal distribution
csv2 = csv[csv['Formula'] == 'Social Novelty']
statistic, p_value = shapiro(csv2['NewValue'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['NewValue'], csv2[(csv2['Sex'] == 'Male')]['NewValue'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['NewValue'], csv2[(csv2['Sex'] == 'Male')]['NewValue'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['NewValue'], csv2[(csv2['Sex'] == 'Female')]['NewValue'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['NewValue'])
sem_cup3 = stats.sem(csv2['NewValue'])
degrees_freedom = len(csv2['NewValue']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Filter the data to include only rows with "Sociable Index"
df_sociable_index = df[df['Formula'] == 'Social Novelty']

# Calculate the means and standard deviations
means = df_sociable_index.groupby('Sex')['NewValue'].mean().reindex(['Female', 'Male'])
stds = df_sociable_index.groupby('Sex')['NewValue'].std().reindex(['Female', 'Male'])

# Set the figure size
plt.figure(figsize=(6, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Create the bar plot with error bars
ax = sns.barplot(x='Sex', y='NewValue', data=df_sociable_index, ci=None, palette={'Female':'magenta','Male':'green'}, alpha=0.7, capsize=0.1, errwidth=2, width = 0.6, legend = False)
ax.errorbar(['Female', 'Male'], means, yerr=stds, fmt='none', c='black', capsize=5, label='Standard Deviation')

# Overlay the individual data points
sns.stripplot(x='Sex', y='NewValue', data=df_sociable_index, jitter=True, color='black', size=8, alpha=0.6, ax=ax)

# Add a horizontal line for the x-axis
plt.axhline(0, color='black', linewidth=1)

# Remove the top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)


# Customize the plot
plt.title('')
plt.xlabel('Sex')
plt.ylabel('Social Novelty')
plt.ylim(0, 1)

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/SocialNovelty.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()