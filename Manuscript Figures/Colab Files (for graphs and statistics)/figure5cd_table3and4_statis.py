# -*- coding: utf-8 -*-
"""Figure5cd_Table3and4_Statis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19nzO0rke1iOcHRAnNLi8k-zJ4ipR5yhD
"""

import pandas as pd
import numpy as np
import scipy.stats as stats
from google.colab import drive
from scipy.stats import shapiro, wilcoxon
import statsmodels.stats.api as sms

from statsmodels.multivariate.manova import MANOVA
from sklearn.datasets import load_iris

drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/Num_SimBA_Behaviors_SexDiff.csv')
print(csv)

csv.columns = ['Mouse_Name','Sex','Paired_Exploration','Pursuit','Nose_Nose','Anogenital_Sniffing','Side_Side']
csv.head()

# Apply MANOVA with the renamed columns
manova = MANOVA.from_formula('Paired_Exploration + Pursuit + Nose_Nose + Anogenital_Sniffing + Side_Side ~ Sex', data=csv)
result = manova.mv_test()
print(result)

csv2 = pd.read_csv('/content/drive/My Drive/Median_SimBA_Behaviors_SexDiff.csv')
csv2.head()

csv2.columns = ['Mouse_Name','Sex','Paired_Exploration','Pursuit','Nose_Nose','Anogenital_Sniffing','Side_Side']
csv2.head()

# Apply MANOVA with the renamed columns
manova = MANOVA.from_formula('Paired_Exploration + Pursuit + Nose_Nose + Anogenital_Sniffing + Side_Side ~ Sex', data=csv2)
result = manova.mv_test()
print(result)

"""# **Number of SimBA Behaviors Statistics**

# **Within-Group Comparisons**
"""

import pandas as pd
import seaborn as sns
import numpy as np
import scipy.stats as stats
from scipy.stats import shapiro
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu

def cohens_d(group1, group2):
    """Calculate Cohen's d effect size.

    Parameters:
    group1 (array-like): Data for group 1.
    group2 (array-like): Data for group 2.

    Returns:
    float: Cohen's d effect size.
    """
    mean_diff = np.mean(group1) - np.mean(group2)
    n1, n2 = len(group1), len(group2)
    pooled_std = np.sqrt(((n1 - 1) * np.std(group1, ddof=1)**2 + (n2 - 1) * np.std(group2, ddof=1)**2) / (n1 + n2 - 2))
    return mean_diff / pooled_std

csv = pd.read_csv('/content/drive/My Drive/Num_SimBA_Behaviors_SexDiff.csv')
csv.head()

"""**Female Mice**"""

group_one = csv[csv['Sex'] == 'F']['Paired Exploration']
group_two = csv[csv['Sex'] == 'F']['Pursuit']

# Check for normality
stat, p = shapiro(group_one - group_two)
print(f'Shapiro-Wilk test statistic: {stat}, p-value: {p}')

if p > 0.05:
    print("Data is normally distributed. Proceeding with paired t-test.")
    # Perform paired t-test
    t_statistic, p_value = stats.ttest_rel(group_one, group_two)

    # Calculate Cohen's d
    cohens_d_value = cohens_d(group_one, group_two)

    # Calculate confidence interval
    cm = sms.CompareMeans(sms.DescrStatsW(group_one), sms.DescrStatsW(group_two))
    conf_int = cm.tconfint_diff(usevar='unequal')

    print("Cohen's d: \t", cohens_d_value)
    print("T-statistic:\t", t_statistic)
    print("P-value: \t", p_value)
    print("Confidence Interval:\t", conf_int)
else:
    print("Data is not normally distributed. Proceeding with Wilcoxon signed-rank test.")
    # Perform Wilcoxon signed-rank test
    stat, p_value = wilcoxon(group_one, group_two)

    # Calculate confidence interval using bootstrapping
    diff = group_one - group_two
    bootstrap_samples = [np.random.choice(diff, size=len(diff), replace=True).mean() for _ in range(1000)]
    conf_int = np.percentile(bootstrap_samples, [2.5, 97.5])

    print("Wilcoxon test statistic:\t", stat)
    print("P-value: \t", p_value)
    print("Bootstrap Confidence Interval:\t", conf_int)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Nose Nose']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Side Side']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

"""**Male Mice Within-Comparison**"""

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Nose Nose']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Side Side']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

"""# **Between Group Comparisons**"""

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Paired Exploration'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Paired Exploration'])
sem_cup3 = stats.sem(csv['Paired Exploration'])
degrees_freedom = len(csv['Paired Exploration']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Pursuit'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Pursuit'])
sem_cup3 = stats.sem(csv['Pursuit'])
degrees_freedom = len(csv['Pursuit']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Nose Nose'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Nose Nose'])
sem_cup3 = stats.sem(csv['Nose Nose'])
degrees_freedom = len(csv['Nose Nose']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Anogenital Sniffing'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Anogenital Sniffing'])
sem_cup3 = stats.sem(csv['Anogenital Sniffing'])
degrees_freedom = len(csv['Anogenital Sniffing']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Side Side'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Side Side'])
sem_cup3 = stats.sem(csv['Side Side'])
degrees_freedom = len(csv['Side Side']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

"""# **Median Behavior Time SimBA Statistics**

# **Within Group Comparisons**
"""

csv = pd.read_csv('/content/drive/My Drive/Median_SimBA_Behaviors_SexDiff.csv')
csv.head()

"""**Female Mice**"""

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Nose Nose']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Side Side']
group_two = csv[(csv['Sex'] == 'F')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'F')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'F')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

"""**Male Mice Within-Comparison**"""

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Nose Nose']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Paired Exploration']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Side Side']
group_two = csv[(csv['Sex'] == 'M')]['Pursuit']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Nose Nose']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

group_one = csv[(csv['Sex'] == 'M')]['Anogenital Sniffing']
group_two = csv[(csv['Sex'] == 'M')]['Side Side']
# Perform the t-test
# Initially had ttest_ind but changed to stats.ttest_rel b/c not doing independent measures t-test but a paired t-test since a within-group comparison
t_statistic, p_value = stats.ttest_rel(group_one, group_two)

# Calculate Cohen's d
cohens_d_value = cohens_d(group_one, group_two)

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

"""# **Between Group Comparisons**"""

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Paired Exploration'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Paired Exploration'], csv[(csv['Sex'] == 'M')]['Paired Exploration'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Paired Exploration'])
sem_cup3 = stats.sem(csv['Paired Exploration'])
degrees_freedom = len(csv['Paired Exploration']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Pursuit'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Pursuit'], csv[(csv['Sex'] == 'M')]['Pursuit'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Pursuit'])
sem_cup3 = stats.sem(csv['Pursuit'])
degrees_freedom = len(csv['Pursuit']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Nose Nose'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Nose Nose'], csv[(csv['Sex'] == 'M')]['Nose Nose'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Nose Nose'])
sem_cup3 = stats.sem(csv['Nose Nose'])
degrees_freedom = len(csv['Nose Nose']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Anogenital Sniffing'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Anogenital Sniffing'], csv[(csv['Sex'] == 'M')]['Anogenital Sniffing'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Anogenital Sniffing'])
sem_cup3 = stats.sem(csv['Anogenital Sniffing'])
degrees_freedom = len(csv['Anogenital Sniffing']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Begin with Shapiro-Wilk Test
statistic, p_value = shapiro(csv['Side Side'])
print("Shapiro-Wilk p-value: \t", p_value)

if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Side Side'], csv[(csv['Sex'] == 'M')]['Side Side'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Side Side'])
sem_cup3 = stats.sem(csv['Side Side'])
degrees_freedom = len(csv['Side Side']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)