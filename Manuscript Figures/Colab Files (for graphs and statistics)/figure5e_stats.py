# -*- coding: utf-8 -*-
"""Figure5E_Stats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13wRxlftYmc0ytUK0oEZ0NP62PxjLeiTt

# **Sex Differences Chi Square**
"""

import numpy as np
from scipy.stats import chi2_contingency
from scipy.stats import chi2

# Find what version of Python Colab uses!!!
import sys
print(sys.version)

import numpy as np
from scipy.stats import chi2_contingency
import pandas as pd

# Data
avgf = [1.75, 3.75, 4.875, 5.75, 7, 7.75, 8.75, 10.5, 11.25, 12.25, 14, 16.25, 18.25, 18.875, 20.125, 21.75, 23.25, 24.625, 25.625, 26.25, 27.375]
avgm = [1.25, 1.75, 3.125, 3.5, 4.5, 6.125, 7.5, 8.25, 9.375, 10.875, 11.875, 13.375, 15.25, 16.25, 17.75, 19.375, 21, 22.5, 23.625, 24.5, 25.375]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Paired Exploration')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

# Data
avgf = [3.875,	6.625,	8.5,	9.25,	9.5,	10.875,	11.25,	11.875,	12.375,	12.5,	14.125,	14.875,	15.625,	16,	16.5,	17.625,	18.375,	19.75,	20.5,	20.75,	21.25]
avgm = [4.25,	4.875,	6.875,	8.25,	9.25,	9.875,	10.375,	11.375,	12.125,	13.25,	14.5,	16.125,	17.875,	19.625,	21.5,	22.625,	23.625,	24.25,	25.5,	26.625,	27.75]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Pursuit')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

# Data
avgf = [1.25,	3,	4.25,	5.625,	6.625,	7,	8.125,	9.625,	10.375,	11.5,	12.75,	14,	14.375,	15.625,	16.25,	17,	17.5,	18.75,	19.375,	19.875,	20.5]
avgm = [1.625,	3.375,	4.875,	5.875,	6.875,	7.625,	8,	8.875,	10.5,	12,	12.875,	13.5,	14.625,	16.125,	16.875,	18.75,	19.625,	20,	21.5,	24,	25.125]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Nose Nose')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

# Data
avgf = [2.125,	3.75,	4.125,	4.125,	4.75,	4.75,	5,	5.125,	5.5,	5.875,	6.25,	6.5,	6.875,	7.5,	7.5,	7.625,	7.625,	7.75,	7.875,	7.875	, 7.875]
avgm = [1.5,	2.125,	2.5,	2.5,	4	,4.375,	4.625,	5.125,	5.125,	5.25,	5.75,	6.5,	6.5,	7,	7.375	,7.5,	8,	8.125	,8.75	,9.5,	9.625]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Anogenital Sniffing')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

# Data
avgf = [2.375,	4.25,	6.375	,7.125,	9.125	,10.25,	11.25,	12.875,	13.5,	14.625,	17.25	,19.375	,20.375,	21.625,	23,	24,	25	,27.25,	28.625,	29.375,	30]
avgm = [1.875,	3.625,	4.875,	6.375,	8,	9.125,	10,	10.75,	11.875,	13,	14.75	,15.5,	17,	18.25	,19.75,	21.375,	22.75,	24.5,	25.5,	26.75,	28.125]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Side Side')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))