# -*- coding: utf-8 -*-
"""
Created on Sun Oct 15 14:55:57 2023

This is the fifth script ran in TOI calculations.
The goal of this script is to align the k-means clusters in each frame to the appropriate coordinates of each mouse that was generated by SimBA.

"""
import os
import numpy as np
import cv2
import pandas
import matplotlib.pyplot as plt
import csv


kmean_dir  = r'.\new_KMeansOutput'
mouse_dir = r'.\new_mouse_centers'
order_dir = r'.\new_OrderedCenters'
#Import reformatted k-means file generated in load_k_means.py
kmeans_files = [f for f in os.listdir(kmean_dir) if f.endswith('.csv')]
# Import .csv file containing SimBA coordinates - Note 1/14/24 should say SLEAP, not SimBA
mouse_files = [f for f in os.listdir(mouse_dir) if f.endswith('.csv')]


# Compare values of k-means file and SimBA file to find the groups that are the closest to one another.

for kmeans_file in kmeans_files:
    # For control group there was a hyphen '-' to find
    # result = kmeans_file.find('-')
    # For experimental group try a '.'
    result = kmeans_file.find('.')

    #print(kmeans_file[:result])
    temp_file = kmeans_file[:result] + '_coordinates.csv'
    if temp_file in mouse_files:
        km_csv = os.path.join(kmean_dir, kmeans_file)
        mouse_csv = os.path.join(mouse_dir, temp_file)
        ordered_csv = os.path.join(order_dir, temp_file)
        
        df_km = pandas.read_csv(km_csv, names=['frame','x1','y1','x2','y2','x3','y3'])
        df_m = pandas.read_csv(mouse_csv, names=['frame','x1','y1','x2','y2'])
        
        # All possible combinations of k-means and SimBA coordinates that can be compared
        df_km['d11'] = (df_km['x1']-df_m['x1'])**2 + (df_km['y1']-df_m['y1'])**2
        df_km['d12'] = (df_km['x1']-df_m['x2'])**2 + (df_km['y1']-df_m['y2'])**2
        df_km['d22'] = (df_km['x2']-df_m['x2'])**2 + (df_km['y2']-df_m['y2'])**2
        df_km['d21'] = (df_km['x2']-df_m['x1'])**2 + (df_km['y2']-df_m['y1'])**2
        df_km['d31'] = (df_km['x3']-df_m['x1'])**2 + (df_km['y3']-df_m['y1'])**2
        df_km['d32'] = (df_km['x3']-df_m['x2'])**2 + (df_km['y3']-df_m['y2'])**2
        
        #df_km['min_d'] = df_km[['d11','d12','d21','d22','d31','d32']].min(axis=1)
        
        df_km['mini'] = df_km[['d11','d12','d21','d22','d31','d32']].idxmin(axis=1)
        
        df_km['d11'] = np.where( (df_km['mini'] == 'd11') | \
                                 (df_km['mini'] == 'd12') | \
                                 (df_km['mini'] == 'd21') | \
                                 (df_km['mini'] == 'd31') ,  np.inf, df_km['d11'] )
            
        df_km['d12'] = np.where( (df_km['mini'] == 'd11') | \
                                 (df_km['mini'] == 'd12') | \
                                 (df_km['mini'] == 'd22') | \
                                 (df_km['mini'] == 'd32') ,  np.inf, df_km['d12'] )
            
        df_km['d21'] = np.where( (df_km['mini'] == 'd11') | \
                                 (df_km['mini'] == 'd22') | \
                                 (df_km['mini'] == 'd21') | \
                                 (df_km['mini'] == 'd31') ,  np.inf, df_km['d21'] )
            
        df_km['d22'] = np.where( (df_km['mini'] == 'd21') | \
                                 (df_km['mini'] == 'd12') | \
                                 (df_km['mini'] == 'd22') | \
                                 (df_km['mini'] == 'd32') ,  np.inf, df_km['d22'] )
            
        df_km['d31'] = np.where( (df_km['mini'] == 'd11') | \
                                 (df_km['mini'] == 'd21') | \
                                 (df_km['mini'] == 'd31') | \
                                 (df_km['mini'] == 'd32') ,  np.inf, df_km['d31'] )
            
        df_km['d32'] = np.where( (df_km['mini'] == 'd12') | \
                                 (df_km['mini'] == 'd22') | \
                                 (df_km['mini'] == 'd32') | \
                                 (df_km['mini'] == 'd31') ,  np.inf, df_km['d32'] )
            
        df_km['min2'] = df_km[['d11','d12','d21','d22','d31','d32']].idxmin(axis=1)
        
        df_km['ball'] = 1
        # Finding first coordinate of ball
        df_km['ball'] = np.where( (df_km['mini'] == 'd11') | \
                                 (df_km['mini'] == 'd12') | \
                                 (df_km['min2'] == 'd11') | \
                                 (df_km['min2'] == 'd12') ,  2, df_km['ball'] )
        # Finding second coordinate of ball    
        df_km['ball'] = np.where( ((df_km['mini'] == 'd21') | \
                                 (df_km['mini'] == 'd22') | \
                                 (df_km['min2'] == 'd21') | \
                                 (df_km['min2'] == 'd22')) &  (df_km['ball'] == 2),  3, df_km['ball'] )
        
        # df_km['mouse1'] = np.where( (df_km['mini'] == 'd11') | \
        #                             (df_km['min2'] == 'd11'),  1, 0 )
        # df_km['mouse1'] = np.where( (df_km['mini'] == 'd21') | \
        #                             (df_km['min2'] == 'd21'),  2, df_km['mouse1'] )
        # df_km['mouse1'] = np.where( (df_km['mini'] == 'd31') | \
        #                             (df_km['min2'] == 'd31'),  3, df_km['mouse1'] )
            
        # df_km['mouse2'] = np.where( (df_km['mini'] == 'd12') | \
        #                             (df_km['min2'] == 'd12'),  1, 0 )
        # df_km['mouse2'] = np.where( (df_km['mini'] == 'd22') | \
        #                             (df_km['min2'] == 'd22'),  2, df_km['mouse2'] )
        # df_km['mouse2'] = np.where( (df_km['mini'] == 'd32') | \
        #                             (df_km['min2'] == 'd32'),  3, df_km['mouse2'] )
            
        df_m['bx'] = np.where( (df_km['ball'] == 1),  df_km['x1'], 0 )
        df_m['bx'] = np.where( (df_km['ball'] == 2),  df_km['x2'], df_m['bx'] )
        df_m['bx'] = np.where( (df_km['ball'] == 3),  df_km['x3'], df_m['bx'] )
        
        df_m['by'] = np.where( (df_km['ball'] == 1),  df_km['y1'], 0 )
        df_m['by'] = np.where( (df_km['ball'] == 2),  df_km['y2'], df_m['by'] )
        df_m['by'] = np.where( (df_km['ball'] == 3),  df_km['y3'], df_m['by'] )
        
        # Save outputs into a separate directory (ordered_csv)
        df_m.to_csv(ordered_csv, index=False)
    