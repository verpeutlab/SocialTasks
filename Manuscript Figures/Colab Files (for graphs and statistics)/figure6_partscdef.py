# -*- coding: utf-8 -*-
"""Figure6_PartsCDEF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xi_JNvL3vnE5bOhHGLbOfgJzlrshmzZ6
"""

import numpy as np
from scipy.stats import chi2_contingency
from scipy.stats import chi2
import pandas as pd

# Data
avgf = [8.75,18.875,26.875,34.5,41.375,48,54.25,60.5,66.75,74.375,79.625,85.5,95.875,102.875,109.75,117,121.125,127.5,133.5,145.25]
avgm = [9.5,19.75,27.75,36,43.25,49.625,59,64.75,71.125,79.625,85.75,92.625,99.625,106,112.625,119.375,124.625,133,139,156.5]


# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('One Mouse Encounters')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

# Data
avgf = [0,0.125,0.375,0.5,0.5,1,1.75,1.75,1.75,2.375,2.875,2.875,2.875,2.875,2.875,2.875,3,3.125,3.5,3.5,3.5]
avgm = [0,0.125,0.25,0.5,0.5,0.75,0.875,1.25,1.375,2,2,2.375,2.375,2.75,2.875,3,3,3,3.125,3.5,3.75]

# Define thresholds to categorize the data
thresholds = [10, 20]

# Function to categorize the data
def categorize(data, thresholds):
    categories = []
    for value in data:
        if value < thresholds[0]:
            categories.append('low')
        elif value < thresholds[1]:
            categories.append('medium')
        else:
            categories.append('high')
    return categories

# Categorize the data
categories_f = categorize(avgf, thresholds)
categories_m = categorize(avgm, thresholds)

# Create a contingency table
contingency_table = pd.crosstab(pd.Series(categories_f, name='Female'), pd.Series(categories_m, name='Male'))

# Perform chi-square test
chi2_stat, p, dof, expected = chi2_contingency(contingency_table)

# Print the result
print('Two Mice Encounters')
print("Chi-square statistic:", chi2_stat)
print("p-value:", p)
print("Degrees of freedom:", dof)
print("Expected frequencies:\n", expected)

# Confidence level
confidence_level = 0.95
alpha = 1 - confidence_level

# Confidence interval for the chi-square statistic
from scipy.stats import chi2
chi2_lower = chi2.ppf(alpha / 2, dof)
chi2_upper = chi2.ppf(1 - alpha / 2, dof)

print("95% confidence interval for the chi-square statistic:", (chi2_lower, chi2_upper))

import matplotlib.pyplot as plt
import numpy as np
from google.colab import files
import os

# Data
avgf = [8.75,18.875,26.875,34.5,41.375,48,54.25,60.5,66.75,74.375,79.625,85.5,95.875,102.875,109.75,117,121.125,127.5,133.5,145.25]
avgm = [9.5,19.75,27.75,36,43.25,49.625,59,64.75,71.125,79.625,85.75,92.625,99.625,106,112.625,119.375,124.625,133,139,156.5]

# Plot
plt.figure(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator
plt.plot(avgf, marker='o', color='#df56df', label='Female', linestyle='-')
plt.plot(avgm, marker='o', color='#7aba78', label='Male', linestyle='-')

# Customizing the plot
plt.xlabel('Minute')
plt.ylabel('One Mouse Object Encounters')
plt.title('')
plt.ylim(0, 160)
plt.legend(loc='upper left', frameon=False)  # Top left legend without border

# Remove top and right spines for a cleaner look
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Apply tight layout to reduce white space
plt.tight_layout()

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/OneMouseCumAvg.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

# Data
avgf = [0.125,0.375,0.5,0.5,1,1.75,1.75,1.75,2.375,2.875,2.875,2.875,2.875,2.875,2.875,3,3.125,3.5,3.5,3.5]
avgm = [0.125,0.25,0.5,0.5,0.75,0.875,1.25,1.375,2,2,2.375,2.375,2.75,2.875,3,3,3,3.125,3.5,3.75]

# Plot
plt.figure(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator
plt.plot(avgf, marker='o', color='#df56df', label='Female', linestyle='-')
plt.plot(avgm, marker='o', color='#7aba78', label='Male', linestyle='-')

# Customizing the plot
plt.xlabel('Minute')
plt.ylabel('Two Mice Object Encounters')
plt.title('')
plt.ylim(0, 4)
plt.legend(loc='upper left', frameon=False)  # Top left legend without border

# Remove top and right spines for a cleaner look
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Apply tight layout to reduce white space
plt.tight_layout()

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/TwoMiceCumAvg.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

from google.colab import drive
from scipy.stats import shapiro
import scipy.stats as stats
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/TotalEncounters2.csv')
csv.head()
p_val_list = []
print(csv)

import pandas as pd
from google.colab import drive
from scipy.stats import shapiro
import scipy.stats as stats
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu
from google.colab import files
import os
import numpy as np

def cohens_d(group1, group2):
    """Calculate Cohen's d effect size.

    Parameters:
    group1 (array-like): Data for group 1.
    group2 (array-like): Data for group 2.

    Returns:
    float: Cohen's d effect size.
    """
    mean_diff = np.mean(group1) - np.mean(group2)
    n1, n2 = len(group1), len(group2)
    pooled_std = np.sqrt(((n1 - 1) * np.std(group1, ddof=1)**2 + (n2 - 1) * np.std(group2, ddof=1)**2) / (n1 + n2 - 2))
    return mean_diff / pooled_std

# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['Two Mice'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Two Mice'], csv[(csv['Sex'] == 'M')]['Two Mice'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Two Mice'], csv[(csv['Sex'] == 'M')]['Two Mice'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Two Mice'], csv[(csv['Sex'] == 'M')]['Two Mice'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Two Mice'])
sem_cup3 = stats.sem(csv['Two Mice'])
degrees_freedom = len(csv['Two Mice']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['One Mouse'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['One Mouse'], csv[(csv['Sex'] == 'M')]['One Mouse'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['One Mouse'], csv[(csv['Sex'] == 'M')]['One Mouse'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['One Mouse'], csv[(csv['Sex'] == 'M')]['One Mouse'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['One Mouse'])
sem_cup3 = stats.sem(csv['One Mouse'])
degrees_freedom = len(csv['One Mouse']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['Two Average Time'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Two Average Time'], csv[(csv['Sex'] == 'M')]['Two Average Time'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Two Average Time'], csv[(csv['Sex'] == 'M')]['Two Average Time'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Two Average Time'], csv[(csv['Sex'] == 'M')]['Two Average Time'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Two Average Time'])
sem_cup3 = stats.sem(csv['Two Average Time'])
degrees_freedom = len(csv['Two Average Time']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['One Average Time'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['One Average Time'], csv[(csv['Sex'] == 'M')]['One Average Time'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['One Average Time'], csv[(csv['Sex'] == 'M')]['One Average Time'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['One Average Time'], csv[(csv['Sex'] == 'M')]['One Average Time'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['One Average Time'])
sem_cup3 = stats.sem(csv['One Average Time'])
degrees_freedom = len(csv['One Average Time']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['Total Time'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Total Time'], csv[(csv['Sex'] == 'M')]['Total Time'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Total Time'], csv[(csv['Sex'] == 'M')]['Total Time'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Total Time'], csv[(csv['Sex'] == 'M')]['Total Time'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Total Time'])
sem_cup3 = stats.sem(csv['Total Time'])
degrees_freedom = len(csv['Total Time']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)



# Shapiro-Wilk test to check for normal distribution
statistic, p_value = shapiro(csv['Ball Distance'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
	t_statistic, p_value = ttest_ind(csv[(csv['Sex'] == 'F')]['Ball Distance'], csv[(csv['Sex'] == 'M')]['Ball Distance'])
else:
	t_statistic, p_value = mannwhitneyu(csv[(csv['Sex'] == 'F')]['Ball Distance'], csv[(csv['Sex'] == 'M')]['Ball Distance'])

# Calculate Cohen's d
cohens_d_value = cohens_d(csv[(csv['Sex'] == 'F')]['Ball Distance'], csv[(csv['Sex'] == 'M')]['Ball Distance'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)
p_val_list.append(p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv['Ball Distance'])
sem_cup3 = stats.sem(csv['Ball Distance'])
degrees_freedom = len(csv['Ball Distance']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

df = csv


# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='Two Mice', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='Two Mice', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('Two Mice')
plt.ylim(-0.1, 12)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/TwoMiceObjInteract.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()

# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='One Mouse', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='One Mouse', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('One Mouse')
plt.ylim(0, 220)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/OneMouseObjInteract.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()

# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='Two Average Time', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='Two Average Time', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('Two Average Time')
plt.ylim(-0.005, 0.15)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/TwoAverageTime.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()

# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='One Average Time', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='One Average Time', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('Two Mice')
plt.ylim(0, 0.02)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/OneMouseObjInteract.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()

# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='Total Time', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='Total Time', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('Total Time')
plt.ylim(0, 5)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/TotalTime.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()



# Set the figure size
plt.figure()

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Plot 1: Two Mice
plt.figure()
sns.boxplot(x='Sex', y='Ball Distance', data=df, width=0.5, palette=['#df56df', '#7aba78'])
sns.stripplot(x='Sex', y='Ball Distance', data=df, color='black', jitter=True)
plt.xlabel('')
plt.ylabel('Ball Distance (m)')
plt.ylim(0, 3.5)
plt.xticks([0, 1], ['Female', 'Male'])
plt.title('')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Save file as a PDF to Downloads folder on Mac
file_path = "/content/BallDistance.pdf"
plt.savefig(file_path, dpi=300) # Change dpi from default of 100 to 300
files.download(file_path)

plt.show()