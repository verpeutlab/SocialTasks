# -*- coding: utf-8 -*-
"""Figure4_PartsBCD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iwp-qHx3_hIDJiUke41S_XYWlrSwZQwl
"""

import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib.lines import Line2D
import matplotlib.pyplot as plt
from google.colab import files
import os
import scipy.stats as stats
from scipy.stats import shapiro
from scipy.stats import ttest_ind
from scipy.stats import mannwhitneyu
from google.colab import drive
drive.mount('/content/drive/')
csv = pd.read_csv('/content/drive/My Drive/SexDiffSLEAPOpenField.csv')
print(csv)

# importing library

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 12)

# Create the boxplot
sns.boxplot(x='Sex', y='INNER distance traveled (m)', data=csv, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='INNER distance traveled (m)', data=csv, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Inner Distance Traveled (m)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/InnerDistance.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

# importing library

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 150)

# Create the boxplot
sns.boxplot(x='Sex', y='INNER time spent (s):', data=csv, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='INNER time spent (s):', data=csv, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Inner Time (s))')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/InnerTime.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

# importing library

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 700)

# Create the boxplot
sns.boxplot(x='Sex', y='Total time spent in corners (s):', data=csv, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='Total time spent in corners (s):', data=csv, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Time Spent in Corners(s)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/TotalTimeCorners.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

# importing library

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 150)

# Create the boxplot
sns.boxplot(x='Sex', y='Total Distance Traveled (m):', data=csv, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='Total Distance Traveled (m):', data=csv, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Distance Traveled (m):')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/TotalDistance.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

# importing library

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 0.1)

# Create the boxplot
sns.boxplot(x='Sex', y='Velocity (m/s):', data=csv, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='Velocity (m/s):', data=csv, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Velocity (m/s):')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/Velocity.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

csv2 = pd.read_csv('/content/drive/My Drive/NewSexDiffSLEAPOpenField.csv')
print(csv2)

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 400)

# Create the boxplot
sns.boxplot(x='Sex', y='backleft', data=csv2, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='backleft', data=csv2, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Time Spent in Backleft Corner (s)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/Backleft.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 400)

# Create the boxplot
sns.boxplot(x='Sex', y='backright', data=csv2, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='backright', data=csv2, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Time Spent in Backright Corner (s)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/Backright.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 400)

# Create the boxplot
sns.boxplot(x='Sex', y='frontleft', data=csv2, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='frontleft', data=csv2, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Time Spent in Frontleft Corner (s)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/Frontleft.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

plt.figure()
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

plt.ylim(0, 400)

# Create the boxplot
sns.boxplot(x='Sex', y='frontright', data=csv2, width = 0.5, palette=['#df56df', '#7aba78'], hue = 'Sex')

# Add the stripplot for individual data points
sns.stripplot(x='Sex', y='frontright', data=csv2, color='black')

# Customize the plot
plt.xlabel('')
plt.ylabel('Total Time Spent in Frontright Corner (s)')
plt.xticks([0, 1], ['Female', 'Male'])

# Remove top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().xaxis.set_ticks_position('bottom')
plt.gca().yaxis.set_ticks_position('left')

# Save file as a PDF to Donwloads folder on Mac
file_path = "/content/Frontright.pdf"
plt.savefig(file_path)
files.download(file_path)

# Show the plot
plt.show()

# Separate the data based on `Sex` and chambers
females = csv2[csv2['Sex'] == 'Female']
males = csv2[csv2['Sex'] == 'Male']

# Extract time spent in each chamber
time_spent_females = [
    females['backleft'].tolist(),
    females['backright'].tolist(),
    females['frontleft'].tolist(),
    females['frontright'].tolist()
]
time_spent_males = [
    males['backleft'].tolist(),
    males['backright'].tolist(),
    males['frontleft'].tolist(),
    males['frontright'].tolist()
]

# Calculate means and standard errors
females_mean = [np.mean(data) for data in time_spent_females]
females_sd = [np.std(data, ddof=1) for data in time_spent_females]
males_mean = [np.mean(data) for data in time_spent_males]
males_sd = [np.std(data, ddof=1) for data in time_spent_males]


# Create the bar graph
fig, ax = plt.subplots(figsize=(10, 6))
plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

categories = ['Back Left', 'Back Right', 'Front Left', 'Front Right']

# Bars for females
indices_females = np.arange(len(categories))
bars_females = ax.bar(indices_females, females_mean, yerr=females_sd, label='Female', color='#df56df', capsize=5)

# Bars for males
indices_males = indices_females + len(categories) + 0.5   # Adding space between the groups
bars_males = ax.bar(indices_males, males_mean, yerr=males_sd, label='Male', color='#7aba78', capsize=5)

# Scatter plot for individual data points with jitter
np.random.seed(0)
jitter_females = [np.random.normal(0, 0.05, len(time_spent_females[i])) for i in range(len(categories))]
jitter_males = [np.random.normal(0, 0.05, len(time_spent_males[i])) for i in range(len(categories))]

for i in range(len(categories)):
    ax.scatter(indices_females[i] + jitter_females[i], time_spent_females[i], color='k', zorder=10)
    ax.scatter(indices_males[i] + jitter_males[i], time_spent_males[i], color='k', zorder=10)

# Customizing the plot
ax.set(ylim=(0, 700))
ax.set_xlabel('')
ax.set_ylabel('Time Spent in Each Corner(s)')
ax.set_title('')
ax.set_xticks(np.concatenate((indices_females, indices_males)))
ax.set_xticklabels(categories * 2)
ax.legend(loc='upper left')

# Remove top and right borders
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Reduce white space around the figure
# plt.tight_layout()

# Save file as a PDF
file_path = "/content/TimeSpentInEachCorner.pdf"
plt.savefig(file_path)
files.download(file_path)

# Display the plot
plt.show()

def cohens_d(group1, group2):
    """Calculate Cohen's d effect size.

    Parameters:
    group1 (array-like): Data for group 1.
    group2 (array-like): Data for group 2.

    Returns:
    float: Cohen's d effect size.
    """
    mean_diff = np.mean(group1) - np.mean(group2)
    n1, n2 = len(group1), len(group2)
    pooled_std = np.sqrt(((n1 - 1) * np.std(group1, ddof=1)**2 + (n2 - 1) * np.std(group2, ddof=1)**2) / (n1 + n2 - 2))
    return mean_diff / pooled_std

statistic, p_value = shapiro(csv2['backleft'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['backleft'], csv2[(csv2['Sex'] == 'Male')]['backleft'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['backleft'], csv2[(csv2['Sex'] == 'Male')]['backleft'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['backleft'], csv2[(csv2['Sex'] == 'Female')]['backleft'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['backleft'])
sem_cup3 = stats.sem(csv2['backleft'])
degrees_freedom = len(csv2['backleft']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

statistic, p_value = shapiro(csv2['backright'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['backright'], csv2[(csv2['Sex'] == 'Male')]['backright'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['backright'], csv2[(csv2['Sex'] == 'Male')]['backright'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['backright'], csv2[(csv2['Sex'] == 'Female')]['backright'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['backright'])
sem_cup3 = stats.sem(csv2['backright'])
degrees_freedom = len(csv2['backright']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

statistic, p_value = shapiro(csv2['frontleft'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['frontleft'], csv2[(csv2['Sex'] == 'Male')]['frontleft'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['frontleft'], csv2[(csv2['Sex'] == 'Male')]['frontleft'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['frontleft'], csv2[(csv2['Sex'] == 'Female')]['frontleft'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['frontleft'])
sem_cup3 = stats.sem(csv2['frontleft'])
degrees_freedom = len(csv2['frontleft']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)

statistic, p_value = shapiro(csv2['frontright'])
print("Shapiro-Wilk p-value: \t", p_value)
if p_value > 0.05:
  t_statistic, p_value = ttest_ind(csv2[(csv2['Sex'] == 'Female')]['frontright'], csv2[(csv2['Sex'] == 'Male')]['frontright'])
  print("Data is normally distributed. Student's t-test performed")
else:
  t_statistic, p_value = mannwhitneyu(csv2[(csv2['Sex'] == 'Female')]['frontright'], csv2[(csv2['Sex'] == 'Male')]['frontright'])
  print("Data is not normally distributed. Mann-Whitney U Test performed")
# Calculate Cohen's d
cohens_d_value = cohens_d(csv2[(csv2['Sex'] == 'Male')]['frontright'], csv2[(csv2['Sex'] == 'Female')]['frontright'])

# Print the results
print("Cohen's d: \t",cohens_d_value)
print("T-statistic:\t", t_statistic)
print("P-value: \t", p_value)

# Confidence Interval - the mean and scale of data are from the data inputted into the Shapiro-Wilk test
# Calculating the mean and standard error of the mean
mean_cup3 = np.mean(csv2['frontright'])
sem_cup3 = stats.sem(csv2['frontright'])
degrees_freedom = len(csv2['frontright']) - 1

# Calculating the 95% confidence interval
confidence_interval = stats.t.interval(0.95, degrees_freedom, loc=mean_cup3, scale=sem_cup3)
print("95% confidence interval: ", confidence_interval)